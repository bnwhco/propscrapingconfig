import { useState, useCallback } from 'react';
import { fetchAuthSession, getCurrentUser } from 'aws-amplify/auth';
import { Amplify } from 'aws-amplify';
import type { ScrapedDataResult } from '../types'; // Import shared type

// Get config generated by Amplify CLI
import config from '../amplifyconfiguration.json';

// Function to find the API endpoint from the configuration
// This relies on the output structure defined in amplify/backend.ts
const getScraperApiEndpoint = (): string | null => {
  try {
    // Amplify config structure might place custom outputs under `customOutputs`
    // or directly attach function URLs/API endpoints. Inspect your config.
    const outputs = config.customOutputs || {}; // Adjust if needed based on actual config structure

    // Prioritize the explicitly configured API Gateway endpoint if available
    if (outputs.ScraperApiEndpoint && outputs.ScraperApiEndpoint !== 'Check outputs.json for API Gateway endpoint') {
      console.log("Using Scraper API Gateway Endpoint:", outputs.ScraperApiEndpoint);
      // Ensure it's a valid URL structure
      if (outputs.ScraperApiEndpoint.startsWith('https://')) {
         return outputs.ScraperApiEndpoint;
      }
    }

     // Fallback: Try to find an endpoint associated with the function resource name
    // This is less reliable as internal naming can change.
    // The key might be like 'aws_cloud_logic_custom' or specific to the function.
    // Example structure (needs verification with your config):
    // const apiResources = config.API?.REST; // Or config.api?.REST
    // if (apiResources) {
    //     const scraperApi = Object.values(apiResources).find(api => api.name === 'scrapingFunction'); // Or similar name
    //     if (scraperApi?.endpoint) {
    //         console.log("Found endpoint via API config:", scraperApi.endpoint);
    //         return scraperApi.endpoint;
    //     }
    // }

    console.error('Scraper API endpoint not found or invalid in amplifyconfiguration.json under customOutputs.ScraperApiEndpoint. Please deploy backend and check configuration.');
    return null; // Indicate failure to find endpoint
  } catch (error) {
    console.error("Error reading scraper endpoint from config:", error);
    return null;
  }
};


export const useScraper = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  // Removed local data state - let the App component manage it

  const scrapeUrl = useCallback(async (url: string): Promise<ScrapedDataResult | null> => {
    setLoading(true);
    setError(null);
    let resultData: ScrapedDataResult | null = null;

    try {
      // 1. Ensure user is authenticated
      await getCurrentUser(); // Throws error if not authenticated

      // 2. Get Auth Token (ID token for Cognito User Pool Authorizer)
      const session = await fetchAuthSession();
      const idToken = session.tokens?.idToken?.toString();
      if (!idToken) {
        throw new Error('Could not retrieve ID token. User might not be fully authenticated.');
      }

      // 3. Get API Endpoint
      const endpoint = getScraperApiEndpoint();
      if (!endpoint) {
          throw new Error("Scraper function API endpoint is not configured or found in amplifyconfiguration.json.");
      }

      // 4. Make Authenticated HTTP Request
      const apiUrl = `${endpoint}?url=${encodeURIComponent(url)}`;
      console.log("Calling scraper API:", apiUrl);

      const response = await fetch(apiUrl, {
        method: 'GET', // Must match the method defined in backend.ts/API Gateway
        headers: {
          // Pass the ID Token for Cognito authorization configured on API Gateway
          'Authorization': `${idToken}`, // Amplify API Gateway V2 authorizer expects just the token
          // 'Content-Type': 'application/json', // Not needed for GET
        },
      });

      if (!response.ok) {
        let errorBody = `Request failed with status ${response.status}`;
        try {
          const errJson = await response.json();
          errorBody = errJson.error || errJson.message || JSON.stringify(errJson);
        } catch (parseErr) {
           // Ignore if response body isn't JSON
        }
        throw new Error(errorBody);
      }

      resultData = await response.json() as ScrapedDataResult;
      console.log("Scraper returned:", resultData);

    } catch (err: any) {
      console.error('Scraping hook error:', err);
      setError(err.message || 'Failed to fetch scraping data.');
      resultData = null; // Ensure null is returned on error
    } finally {
      setLoading(false);
    }
    return resultData; // Return the data or null
  }, []);

  return { loading, error, scrapeUrl };
};